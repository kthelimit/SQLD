--연산자
SELECT employee_id || '-' ||emp_name AS employee_Info
    FROM employees
    WHERE ROWNUM < 5;
    
    
--표현식
--단독으로도 쓸 수 있지만 SELECT랑도 쓸 수 있는 모양이다.
SELECT employee_id, salary,
    CASE WHEN salary <= 5000 THEN 'C등급'
        WHEN salary >5000 AND salary<=15000 THEN 'B등급'
        ELSE 'A등급'
        END AS salary_grade
FROM employees;


--조건식
--비교조건식
SELECT employee_id, salary
FROM employees
WHERE salary = ANY(2000,3000,4000)
ORDER BY employee_id;

--SOME은 ANY랑 똑같다.
SELECT employee_id, salary
FROM employees
WHERE salary = SOME(2000,3000,4000)
ORDER BY employee_id;

--OR로도 쓸 수 있다.
SELECT employee_id, salary
FROM employees
WHERE salary = 2000
OR salary = 3000
OR salary = 4000
ORDER BY employee_id;

--ALL
SELECT employee_id, salary
FROM employees
WHERE salary = ALL(2000,3000,4000)
ORDER BY employee_id;

--ALL은 AND로도 쓸 수 있다.
SELECT employee_id, salary
FROM employees
WHERE salary = 2000
AND salary = 3000
AND salary = 4000
ORDER BY employee_id;

--논리조건식
SELECT employee_id, salary
FROM employees
WHERE NOT (salary>=2500) --salary <2500
ORDER BY employee_id;

--NULL 조건식
SELECT employee_id, salary
FROM employees
WHERE salary IS NULL
ORDER BY employee_id;

SELECT employee_id, salary
FROM employees
WHERE salary IS NOT NULL
ORDER BY employee_id;

--BETWEEN AND
SELECT employee_id, salary
FROM employees
WHERE salary BETWEEN 2000 AND 2500 --이상, 이하.. 그렇다 이 친구는 포함인 것이다.
ORDER BY employee_id;

--IN 조건식(ANY랑 비슷하다)
SELECT employee_id, salary
FROM employees
WHERE salary IN(2000,3000,4000) --ANY랑은 달리 무조건 같다만 됨....
ORDER BY employee_id;

SELECT employee_id, salary
FROM employees
WHERE salary NOT IN(2000,3000,4000) --NOT AND, 또는 NOT ALL로 대체 가능
ORDER BY employee_id;


SELECT employee_id, salary
FROM employees
WHERE salary >= ANY(2000)
ORDER BY employee_id;

--EXISTS 조건식
SELECT department_id, department_name
FROM departments a
WHERE EXISTS(SELECT *
        FROM employees b
        WHERE a.department_id = b.department_id
        AND b.salary> 3000)
ORDER BY a.department_id;

--LIKE 조건식
--문자열 패턴 검색할 때 쓰는 조건식이다.
SELECT emp_name
FROM employees
WHERE emp_name LIKE 'A%' --A로 시작하는 데이터
ORDER BY emp_name;

SELECT emp_name
FROM employees
WHERE emp_name LIKE '%A%' --A를 포함하는 데이터
ORDER BY emp_name;
--따옴표 안에 있는 문자는 대소문자를 구분한다.

SELECT emp_name
FROM employees
WHERE emp_name LIKE '%a%' --a를 포함하는 데이터
ORDER BY emp_name;

SELECT emp_name
FROM employees
WHERE emp_name LIKE 'A_' --A뒤에 한글자 있다는 뜻임
ORDER BY emp_name;

SELECT emp_name
FROM employees
WHERE emp_name LIKE 'K_' --K뒤에 한글자 있다는 뜻임
ORDER BY emp_name;

SELECT emp_name
FROM employees
WHERE emp_name LIKE 'K_____' --K뒤에 5글자 있다는 뜻임. 블랭크 포함된다.
ORDER BY emp_name;

--chap03_ex1_quiz3 사원테이블(employees)에서 커미션(commission_pct) 값이 없는 
--사원의 사번과 사원명 추출
SELECT employee_id, emp_name
    FROM employees
WHERE commission_pct IS NULL
ORDER BY employee_id;


--chap03_ex1_quiz4 아래의 쿼리를 논리조건식으로 변환해 보자.
--주어진 쿼리
SELECT employee_id, salary
    FROM employees
WHERE salary BETWEEN 2000 AND 2500
ORDER BY employee_id;

--답
SELECT employee_id, salary
    FROM employees
WHERE salary >= 2000 
 AND salary <= 2500
ORDER BY employee_id;


--chap03_ex1_quiz5 다음의 두 쿼리를 ANY, ALL을 사용해서 동일한 결과를 추출하도록 변경해보자.
--ANY
SELECT employee_id, salary
    FROM employees
WHERE salary IN(2000,3000,4000)
ORDER BY employee_id;

--답
SELECT employee_id, salary
    FROM employees
WHERE salary = ANY(2000,3000,4000)
ORDER BY employee_id;


--ALL
SELECT employee_id, salary
    FROM employees
WHERE salary NOT IN(2000,3000,4000)
ORDER BY employee_id;

--답
SELECT employee_id, salary
    FROM employees
WHERE salary != ALL(2000,3000,4000)
ORDER BY employee_id;


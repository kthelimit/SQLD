--동등조인
SELECT a.employee_id, a.emp_name, a.department_id, b.department_name
FROM employees a, departments b
WHERE a.department_id  = b.department_id;

--exists
SELECT department_id, department_name
FROM departments a
WHERE EXISTS(SELECT *
        FROM employees b
        WHERE a.department_id = b.department_id
        AND b.salary>3000)
ORDER BY a.department_name;

--in
SELECT department_id, department_name
FROM departments a
WHERE a.department_id IN(SELECT b.department_id
        FROM employees b
        WHERE b.salary>3000)
ORDER BY a.department_name;

--동등조인에서는 중복 제거가 안된다..... DISTINCT를 따로 써줘야한다.
SELECT a.department_id, b.department_name
FROM employees a, departments b
WHERE a.department_id  = b.department_id
AND  a.salary>3000;

--안티조인
SELECT a.employee_id, a.emp_name, a.department_id, b.department_name
FROM employees a, departments b
WHERE a.department_id = b.department_id
AND a.department_id NOT IN(SELECT department_id
                        FROM departments
                        WHERE manager_id IS NULL);

SELECT COUNT(*)
FROM employees a
WHERE NOT EXISTS(SELECT 1 --department_id를 가리킨다.
                FROM departments c
                WHERE a.department_id = c.department_id
                AND manager_id IS NULL);


--셀프조인
SELECT a.employee_id, a.emp_name, b.employee_id, b.emp_name, a.department_id
    FROM employees a,
    employees b
    WHERE a.employee_id < b.employee_id
    AND a.department_id = b.department_id
    AND a.department_id = 20;

--외부조인
--일반조인
SELECT a.department_id, a.department_name, b.job_id, b.department_id
FROM departments a, job_history b
WHERE a.department_id = b.department_id;

--외부조인
SELECT a.department_id, a.department_name, b.job_id, b.department_id
FROM departments a, job_history b
WHERE a.department_id = b.department_id(+);

SELECT a.employee_id, a.emp_name, b.job_id, b.department_id
FROM employees a, job_history b
WHERE a.employee_id = b.employee_id(+)
AND a.department_id = b.department_id;

SELECT a.employee_id, a.emp_name, b.job_id, b.department_id
FROM employees a, job_history b
WHERE a.employee_id = b.employee_id(+)
AND a.department_id = b.department_id(+);

--카타시안 조인
SELECT a.employee_id, a.emp_name, b.department_id, b.department_name
FROM employees a, departments b;
--107*27 = 2889

--ANSI 조인
--ANSI 내부 조인
SELECT a.employee_id, a.emp_name,  b.department_id, b.department_name
FROM employees a, departments b
WHERE a. department_id = b.department_id
 AND a.hire_date > = TO_DATE('2003-01-01', 'YYYY-MM-DD');
 
SELECT a.employee_id, a.emp_name,  b.department_id, b.department_name
 FROM employees a 
 INNER JOIN departments b
  ON (a. department_id = b.department_id)
WHERE a.hire_date > = TO_DATE('2003-01-01', 'YYYY-MM-DD');
 
SELECT a.employee_id, a.emp_name, department_id, b.department_name
 FROM employees a 
 INNER JOIN departments b
  USING (department_id)
WHERE a.hire_date > = TO_DATE('2003-01-01', 'YYYY-MM-DD');

--ANSI 외부 조인

SELECT a.employee_id, a.emp_name, b.job_id, b.department_id
FROM employees a, job_history b
WHERE a.employee_id = b.employee_id(+)
AND a.department_id = b.department_id(+);

SELECT a.employee_id, a.emp_name, b.job_id, b.department_id
FROM employees a
LEFT OUTER JOIN job_history b
ON( a.employee_id = b.employee_id AND a.department_id = b.department_id);

SELECT a.employee_id, a.emp_name, b.job_id, b.department_id
FROM job_history b
RIGHT OUTER JOIN employees a
ON( a.employee_id = b.employee_id AND a.department_id = b.department_id);

--ANSI CROSS 조인(카타시안 조인)

SELECT a.employee_id, a.emp_name, b.department_id, b.department_name
FROM employees a, departments b;

SELECT a.employee_id, a.emp_name, b.department_id, b.department_name
FROM employees a CROSS JOIN departments b;


--ANSI FULL OUTER조인
CREATE TABLE LEE_A (EMP_ID INT);
CREATE TABLE LEE_B (EMP_ID INT);

INSERT INTO LEE_A VALUES(10);
INSERT INTO LEE_A VALUES(20);
INSERT INTO LEE_A VALUES(40);

INSERT INTO LEE_B VALUES(10);
INSERT INTO LEE_B VALUES(20);
INSERT INTO LEE_B VALUES(30);

COMMIT;

SELECT a.emp_id, b.emp_id
FROM lee_a a, lee_b b
WHERE a.emp_id(+) = b.emp_id(+) ;


SELECT a.emp_id, b.emp_id
FROM lee_a a FULL OUTER JOIN lee_b b
ON(a.emp_id = b.emp_id);

--서브쿼리
--연관성 없는 서브쿼리
SELECT COUNT(*)
FROM employees
WHERE salary>=(SELECT AVG(salary) FROM employees);

SELECT count(*)
FROM employees
WHERE department_id IN(SELECT department_id
                        FROM departments
                        WHERE parent_id IS NULL);

SELECT employee_id, emp_name, job_id
FROM employees
WHERE (employee_id, job_id)IN (SELECT employee_id, job_id FROM job_history);

UPDATE employees
 SET salary = (SELECT AVG(salary) FROM employees);
 
DELETE employees
WHERE salary >=(SELECT AVG(salary) FROM employees);

ROLLBACK;


--연관성 있는 서브쿼리( = 메인 테이블과 조인조건이 있다)

SELECT a.department_id, a.department_name
FROM departments a
WHERE EXISTS(SELECT 1 --department_id를 가리킨다.
        FROM job_history b
        WHERE a.department_id = b.department_id);


SELECT a.employee_id, 
        (SELECT b.emp_name FROM employees b WHERE a.employee_id = b.employee_id) AS emp_name,
        a.department_id, 
        (SELECT b.department_name FROM departments b WHERE a.department_id = b.department_id) AS dep_name
FROM job_history a;

SELECT a.department_id, a.department_name
FROM departments a
WHERE EXISTS(SELECT 1
            FROM employees b
            WHERE a.department_id = b.department_id
            AND b.salary >(SELECT AVG(salary) FROM employees)
            );

SELECT department_id, AVG(salary)
FROM employees a
WHERE department_id IN(SELECT department_id
                        FROM departments
                        WHERE parent_id =90)
GROUP BY department_id;

UPDATE employees a
SET a.salary = (SELECT sal
                    FROM (SELECT b.department_id, AVG(salary) as sal
                            FROM departments b, employees c
                            WHERE b.parent_id =90
                            AND b.department_id = c.department_id
                            GROUP BY b.department_id ) d
                WHERE a.department_id = d.department_id)
WHERE a.department_id IN (SELECT department_id 
                        FROM departments
                        WHERE parent_id = 90);

SELECT department_id, MIN(salary), MAX(salary)
FROM employees a
WHERE department_id IN(SELECT department_id
FROM departments
WHERE parent_id =90)
GROUP BY department_id;

MERGE INTO employees a
USING(SELECT b.department_id, AVG(c.salary) as sal
            FROM departments b, employees c
            WHERE b.parent_id =90
            AND b.department_id=c.department_id
            GROUP BY b.department_id) d
ON(a.department_id = d.department_id)
WHEN MATCHED THEN
UPDATE SET a.salary = d.sal;
               

ROLLBACK;

--인라인 뷰
SELECT a.employee_id, a.emp_name, b.department_id, b.department_name
FROM employees a, departments b,(SELECT AVG(c.salary) AS avg_salary
                                    FROM departments b, employees c
                                    WHERE b.parent_id = 90 --기획부
                                    AND b.department_id = c.department_id) d
WHERE a.department_id = b.department_id
AND a.salary > d.avg_salary;
 --이탈리아의 2000년도 월간 평균 매출액
SELECT a.sales_month, ROUND(AVG(a.amount_sold)) AS month_avg
        FROM sales a, customers b, countries c
        WHERE a.sales_month BETWEEN '200001' AND '200012'
        AND a.cust_id = b.cust_id
        AND b.country_id = c.country_id
        AND c.country_name = 'Italy'
        GROUP BY a.sales_month
        ORDER BY a.sales_month;

--이탈리아의 2000년도 연간 평균 매출액
SELECT ROUND(AVG(a.amount_sold)) AS year_avg
        FROM sales a, customers b, countries c
        WHERE a.sales_month BETWEEN '200001' AND '200012'
        AND a.cust_id = b.cust_id
        AND b.country_id = c.country_id
        AND c.country_name = 'Italy';        
        
        
        
        

SELECT a.*
FROM (SELECT a.sales_month, ROUND(AVG(a.amount_sold)) AS month_avg
        FROM sales a, customers b, countries c
        WHERE a.sales_month BETWEEN '200001' AND '200012'
        AND a.cust_id = b.cust_id
        AND b.country_id = c.country_id
        AND c.country_name = 'Italy'
        GROUP BY a.sales_month) a, --이탈리아의 2000년도 월간 평균 매출액
    (SELECT ROUND(AVG(a.amount_sold)) AS year_avg
        FROM sales a, customers b, countries c
        WHERE a.sales_month BETWEEN '200001' AND '200012'
        AND a.cust_id = b.cust_id
        AND b.country_id = c.country_id
        AND c.country_name = 'Italy') b --이탈리아의 2000년도 연간 평균 매출액
WHERE a.month_avg > b.year_avg;


--chap_06_ex1_quiz1
SELECT a.employee_id, a.emp_name, d.job_title, c.start_date, c.end_date, b.department_name
FROM employees a, departments b, job_history c, jobs d
WHERE  a.department_id = b.department_id
    AND a.employee_id = c.employee_id
    AND a.job_id = d.job_id
    AND a.employee_id = 101;    

--chap_06_ex1_quiz2
SELECT a.employee_id, a.emp_name, b.job_id, b.department_id
FROM employees a, job_history b
WHERE a.employee_id = b.employee_id(+)
AND a.department_id(+) = b.department_id;
--아우터조인을 한쪽에만 해야했는데 번갈아가며 써서...
SELECT a.employee_id, a.emp_name, b.job_id, b.department_id
FROM employees a, job_history b
WHERE a.employee_id = b.employee_id(+)
AND a.department_id = b.department_id(+);

--chap_06_ex1_quiz3
SELECT a.department_id, a.department_name
FROM departments a, employees b
WHERE a.department_id = b.department_id
AND b.salary>3000
ORDER BY a.department_name;

--ANSI
SELECT a.department_id, a.department_name
FROM departments a INNER JOIN employees b
ON(a.department_id = b.department_id)
WHERE b.salary>3000
ORDER BY a.department_name;



--chap_06_ex1_quiz4
SELECT a.department_id, a.department_name
FROM departments a
WHERE EXISTS (SELECT 1
            FROM job_history b
            WHERE a.department_id = b.department_id);
            
SELECT department_id, department_name
FROM departments
WHERE department_id IN (SELECT department_id
            FROM job_history);


















